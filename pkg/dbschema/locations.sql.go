// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: locations.sql

package dbschema

import (
	"context"
)

const createLocation = `-- name: CreateLocation :exec
insert into locations (name, description)
values ($1, $2)
`

type CreateLocationParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) error {
	_, err := q.db.ExecContext(ctx, createLocation, arg.Name, arg.Description)
	return err
}

const deleteLocation = `-- name: DeleteLocation :exec
delete
from locations
where id = $1
`

func (q *Queries) DeleteLocation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLocation, id)
	return err
}

const getLocation = `-- name: GetLocation :one
select id, name, description
from locations
where id = $1
`

func (q *Queries) GetLocation(ctx context.Context, id int64) (Location, error) {
	row := q.db.QueryRowContext(ctx, getLocation, id)
	var i Location
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getLocations = `-- name: GetLocations :many
select id, name, description
from locations
order by id
`

func (q *Queries) GetLocations(ctx context.Context) ([]Location, error) {
	rows, err := q.db.QueryContext(ctx, getLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLocation = `-- name: UpdateLocation :one
update locations
set name       = $2,
    description= $3
where id = $1
returning id, name, description
`

type UpdateLocationParams struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, updateLocation, arg.ID, arg.Name, arg.Description)
	var i Location
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}
