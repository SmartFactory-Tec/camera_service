// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: person_detections.sql

package dbschema

import (
	"context"

	"github.com/SmartFactory-Tec/camera_service/pkg/dbenums"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPersonDetection = `-- name: CreatePersonDetection :one
insert into person_detections(camera_id, detection_date, target_direction)
values ($1, $2, $3)
returning id, camera_id, detection_date, target_direction
`

type CreatePersonDetectionParams struct {
	CameraID        int64              `json:"camera_id"`
	DetectionDate   pgtype.Timestamptz `json:"detection_date"`
	TargetDirection Direction          `json:"target_direction"`
}

func (q *Queries) CreatePersonDetection(ctx context.Context, arg CreatePersonDetectionParams) (PersonDetection, error) {
	row := q.db.QueryRow(ctx, createPersonDetection, arg.CameraID, arg.DetectionDate, arg.TargetDirection)
	var i PersonDetection
	err := row.Scan(
		&i.ID,
		&i.CameraID,
		&i.DetectionDate,
		&i.TargetDirection,
	)
	return i, err
}

const deletePersonDetection = `-- name: DeletePersonDetection :exec
delete
from person_detections
where id = $1
`

func (q *Queries) DeletePersonDetection(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePersonDetection, id)
	return err
}

const getPersonDetection = `-- name: GetPersonDetection :one
select id, camera_id, detection_date, target_direction
from person_detections
where id = $1
`

func (q *Queries) GetPersonDetection(ctx context.Context, id int64) (PersonDetection, error) {
	row := q.db.QueryRow(ctx, getPersonDetection, id)
	var i PersonDetection
	err := row.Scan(
		&i.ID,
		&i.CameraID,
		&i.DetectionDate,
		&i.TargetDirection,
	)
	return i, err
}

const getPersonDetections = `-- name: GetPersonDetections :many
select id, camera_id, detection_date, target_direction
from person_detections
order by detection_date
offset $1::int limit $2::int
`

type GetPersonDetectionsParams struct {
	DetectionOffset int32 `json:"detection_offset"`
	Count           int32 `json:"count"`
}

func (q *Queries) GetPersonDetections(ctx context.Context, arg GetPersonDetectionsParams) ([]PersonDetection, error) {
	rows, err := q.db.Query(ctx, getPersonDetections, arg.DetectionOffset, arg.Count)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PersonDetection
	for rows.Next() {
		var i PersonDetection
		if err := rows.Scan(
			&i.ID,
			&i.CameraID,
			&i.DetectionDate,
			&i.TargetDirection,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPersonDetectionsForCamera = `-- name: GetPersonDetectionsForCamera :many
select id, camera_id, detection_date, target_direction
from person_detections
where camera_id = $1
order by detection_date
offset $2::int limit $3::int
`

type GetPersonDetectionsForCameraParams struct {
	CameraID        int64 `json:"camera_id"`
	DetectionOffset int32 `json:"detection_offset"`
	Count           int32 `json:"count"`
}

func (q *Queries) GetPersonDetectionsForCamera(ctx context.Context, arg GetPersonDetectionsForCameraParams) ([]PersonDetection, error) {
	rows, err := q.db.Query(ctx, getPersonDetectionsForCamera, arg.CameraID, arg.DetectionOffset, arg.Count)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PersonDetection
	for rows.Next() {
		var i PersonDetection
		if err := rows.Scan(
			&i.ID,
			&i.CameraID,
			&i.DetectionDate,
			&i.TargetDirection,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePersonDetection = `-- name: UpdatePersonDetection :one
update person_detections
set camera_id        = coalesce($2, camera_id),
    detection_date   = coalesce($3, detection_date),
    target_direction = coalesce($4, target_direction)
where id = $1
returning id, camera_id, detection_date, target_direction
`

type UpdatePersonDetectionParams struct {
	ID              int64              `json:"id"`
	CameraID        pgtype.Int8        `json:"camera_id"`
	DetectionDate   pgtype.Timestamptz `json:"detection_date"`
	TargetDirection dbenums.Direction  `json:"target_direction"`
}

func (q *Queries) UpdatePersonDetection(ctx context.Context, arg UpdatePersonDetectionParams) (PersonDetection, error) {
	row := q.db.QueryRow(ctx, updatePersonDetection,
		arg.ID,
		arg.CameraID,
		arg.DetectionDate,
		arg.TargetDirection,
	)
	var i PersonDetection
	err := row.Scan(
		&i.ID,
		&i.CameraID,
		&i.DetectionDate,
		&i.TargetDirection,
	)
	return i, err
}
