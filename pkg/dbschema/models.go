// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package dbschema

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type CameraOrientation string

const (
	CameraOrientationVertical           CameraOrientation = "vertical"
	CameraOrientationHorizontal         CameraOrientation = "horizontal"
	CameraOrientationInvertedVertical   CameraOrientation = "inverted_vertical"
	CameraOrientationInvertedHorizontal CameraOrientation = "inverted_horizontal"
)

func (e *CameraOrientation) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CameraOrientation(s)
	case string:
		*e = CameraOrientation(s)
	default:
		return fmt.Errorf("unsupported scan type for CameraOrientation: %T", src)
	}
	return nil
}

type NullCameraOrientation struct {
	CameraOrientation CameraOrientation
	Valid             bool // Valid is true if CameraOrientation is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCameraOrientation) Scan(value interface{}) error {
	if value == nil {
		ns.CameraOrientation, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CameraOrientation.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCameraOrientation) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CameraOrientation), nil
}

type Direction string

const (
	DirectionLeft  Direction = "left"
	DirectionRight Direction = "right"
	DirectionNone  Direction = "none"
)

func (e *Direction) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Direction(s)
	case string:
		*e = Direction(s)
	default:
		return fmt.Errorf("unsupported scan type for Direction: %T", src)
	}
	return nil
}

type NullDirection struct {
	Direction Direction
	Valid     bool // Valid is true if Direction is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDirection) Scan(value interface{}) error {
	if value == nil {
		ns.Direction, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Direction.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDirection) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Direction), nil
}

type Camera struct {
	ID               int64             `json:"id"`
	Name             string            `json:"name"`
	ConnectionString string            `json:"connection_string"`
	LocationText     string            `json:"location_text"`
	LocationID       int32             `json:"location_id"`
	Orientation      CameraOrientation `json:"orientation"`
	EntryDirection   Direction         `json:"entry_direction"`
}

type CameraDetection struct {
	ID                int64     `json:"id"`
	CameraID          int64     `json:"camera_id"`
	InDirection       int32     `json:"in_direction"`
	OutDirection      int32     `json:"out_direction"`
	Counter           int32     `json:"counter"`
	SocialDistancingV int32     `json:"social_distancing_v"`
	DetectionDate     time.Time `json:"detection_date"`
}

type Location struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

type PersonDetection struct {
	ID              int64     `json:"id"`
	CameraID        int64     `json:"camera_id"`
	DetectionDate   time.Time `json:"detection_date"`
	TargetDirection Direction `json:"target_direction"`
}
