// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package dbschema

import (
	"database/sql/driver"
	"fmt"

	"github.com/SmartFactory-Tec/camera_service/pkg/dbenums"
	"github.com/jackc/pgx/v5/pgtype"
)

type Direction string

const (
	DirectionLeft  Direction = "left"
	DirectionRight Direction = "right"
	DirectionNone  Direction = "none"
)

func (e *Direction) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Direction(s)
	case string:
		*e = Direction(s)
	default:
		return fmt.Errorf("unsupported scan type for Direction: %T", src)
	}
	return nil
}

type NullDirection struct {
	Direction Direction
	Valid     bool // Valid is true if Direction is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDirection) Scan(value interface{}) error {
	if value == nil {
		ns.Direction, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Direction.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDirection) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Direction), nil
}

type Orientation string

const (
	OrientationVertical           Orientation = "vertical"
	OrientationHorizontal         Orientation = "horizontal"
	OrientationInvertedVertical   Orientation = "inverted_vertical"
	OrientationInvertedHorizontal Orientation = "inverted_horizontal"
)

func (e *Orientation) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Orientation(s)
	case string:
		*e = Orientation(s)
	default:
		return fmt.Errorf("unsupported scan type for Orientation: %T", src)
	}
	return nil
}

type NullOrientation struct {
	Orientation Orientation
	Valid       bool // Valid is true if Orientation is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrientation) Scan(value interface{}) error {
	if value == nil {
		ns.Orientation, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Orientation.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrientation) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Orientation), nil
}

type Camera struct {
	ID               int64               `json:"id"`
	Name             string              `json:"name"`
	ConnectionString string              `json:"connection_string"`
	LocationText     string              `json:"location_text"`
	LocationID       int32               `json:"location_id"`
	Orientation      dbenums.Orientation `json:"orientation"`
}

type CameraDetection struct {
	ID                int64              `json:"id"`
	CameraID          int64              `json:"camera_id"`
	InDirection       int32              `json:"in_direction"`
	OutDirection      int32              `json:"out_direction"`
	Counter           int32              `json:"counter"`
	SocialDistancingV int32              `json:"social_distancing_v"`
	DetectionDate     pgtype.Timestamptz `json:"detection_date"`
}

type Location struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

type PersonDetection struct {
	ID              int64              `json:"id"`
	CameraID        int64              `json:"camera_id"`
	DetectionDate   pgtype.Timestamptz `json:"detection_date"`
	TargetDirection dbenums.Direction  `json:"target_direction"`
}
